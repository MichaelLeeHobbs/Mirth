# Mirth Connect configuration file

# directories
dir.appdata = appdata
dir.tempdata = ${dir.appdata}/temp

# ports
http.port = ${HTTP_PORT}
https.port = ${HTTPS_PORT}

# password requirements
password.minlength = ${PW_MIN_LENGTH}
password.minupper = ${PW_MIN_UPPER}
password.minlower = ${PW_MIN_LOWER}
password.minnumeric = ${PW_MIN_NUMERIC}
password.minspecial = ${PW_MIN_SPECIAL}
password.retrylimit = ${PW_RETRY_LIMIT}
password.lockoutperiod = ${PW_LOCKOUT_PERIOD}
password.expiration = ${PW_EXPIRATION}
password.graceperiod = ${PW_GRACE_PERIOD}
password.reuseperiod = ${PW_REUSE_PERIOD}
password.reuselimit = ${PW_REUSE_LIMIT}

# Only used for migration purposes, do not modify
version = 3.7.0

# keystore
keystore.path = ${KEYSTORE_PATH}
keystore.storepass = ${KEYSTORE_STOREPASS}
keystore.keypass = ${KEYSTORE_KEYPASS}
keystore.type = ${KEYSTORE_TYPE}

# server
http.contextpath = /
server.url =

http.host = 0.0.0.0
https.host = 0.0.0.0

https.client.protocols = TLSv1.3,TLSv1.2,TLSv1.1
https.server.protocols = TLSv1.3,TLSv1.2,TLSv1.1,SSLv2Hello
https.ciphersuites = TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_DSS_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_DSS_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_DSS_WITH_AES_128_CBC_SHA,TLS_EMPTY_RENEGOTIATION_INFO_SCSV
https.ephemeraldhkeysize = 2048

# CORS headers
server.api.accesscontrolalloworigin = *
server.api.accesscontrolallowcredentials = false
server.api.accesscontrolallowmethods = GET, POST, DELETE, PUT
server.api.accesscontrolallowheaders = Content-Type
server.api.accesscontrolexposeheaders =
server.api.accesscontrolmaxage =

# Determines whether or not channels are deployed on server startup.
server.startupdeploy = true

# Determines whether libraries in the custom-lib directory will be included on the server classpath.
# To reduce potential classpath conflicts you should create Resources and use them on specific channels/connectors instead, and then set this value to false.
server.includecustomlib = false

# administrator
administrator.maxheapsize = ${ADMIN_MAX_HEAP}

# properties file that will store the configuration map and be loaded during server startup
configurationmap.path = ${dir.appdata}/configuration.properties

# The language version for the Rhino JavaScript engine (supported values: 1.0, 1.1, ..., 1.8, es6).
rhino.languageversion = ${JS_VER}

# options: derby, mysql, postgres, oracle, sqlserver
database = ${DB_TYPE}

# examples:
#       Derby           jdbc:derby:${dir.appdata}/mirthdb;create=true
#       PostgreSQL      jdbc:postgresql://localhost:5432/mirthdb
#       MySQL           jdbc:mysql://localhost:3306/mirthdb
#       Oracle          jdbc:oracle:thin:@localhost:1521:DB
#       SQLServer       jdbc:jtds:sqlserver://localhost:1433/mirthdb
database.url = ${DB_URL}

# if using a custom driver, specify it here
#database.driver =

# Maximum number of connections allowed for the main read/write connection pool
database.max-connections = ${DB_MAX_CONNECTIONS}
# Maximum number of connections allowed for the read-only connection pool
database-readonly.max-connections = ${DB_MAX_READONLY_CONNECTIONS}

# database credentials
database.username = ${DB_USERNAME}
database.password = ${DB_PASSWORD}

# If true, various read-only statements are separated into their own connection pool.
# By default the read-only pool will use the same connection information as the master pool,
# but you can change this with the "database-readonly" options. For example, to point the
# read-only pool to a different JDBC URL:
#
# database-readonly.url = jdbc:...
#
database.enable-read-write-split = true
